<?php

/**
 * A service covering the /fundraising endpoints of the JustGiving API.
 */

namespace JustGivingApi\Services;

use JustGivingApi\Exceptions\ApiException;
use JustGivingApi\Models\FundraisingPage;

/**
 * Service that wraps up JustGiving API endpoints starting with /fundraising.
 */
class FundraisingService extends Service
{
    /**
     * Creates a fundraising page.
     *
     * @param  FundraisingPage $page The page data to be used to create the page
     * @return Object containing the response data:
     *  {
     *      "Next.rel": "string",
     *      "Next.uri": "string",
     *      "Next.type": "string",
     *      "Error.id": "string",
     *      "Error.desc": "string",
     *      "pageId": 0,
     *      "signOnUrl": "string",
     *      "errorMessage": "string"
     *  }
     */
    public function createPage(FundraisingPage $page)
    {
        try {
            $data = $this->transport->put('fundraising/pages', $page->toArray());
        } catch (ApiException $e) {
            if ($e->getCode() == 404) {
                return false;
            }
            throw $e;
        }
        return $data;
    }

    /**
     * Get a page update by its ID.
     *
     * @param  string $pageShortName The page name
     * @param  int $updateId The ID of the update
     * @return object Containing the Id, Video, CreatedDate, and Message
     */
    public function getPageUpdateById($pageShortName, $updateId)
    {
        return $this->transport->get('fundraising/pages/' . $pageShortName . '/updates/' . $updateId);
    }

    /**
     * Get a page's updates.
     *
     * @param  string $pageShortName The page name
     * @return object Containing the Id, Video, CreatedDate, and Message
     */
    public function getPageUpdates($pageShortName)
    {
        return $this->transport->get('fundraising/pages/' . $pageShortName . '/updates');
    }

    /**
     * Suggests a few short page names based on user preference.
     *
     * @param  string $preferredName The preferred page short name.
     * @return array Strings containing unused suggestions.
     */
    public function getShortNameSuggestions($preferredName)
    {
        $data = $this->transport->get('fundraising/pages/suggest?preferredName=' . urlencode($preferredName));
        if (!isset($data->Names) || !is_array($data->Names)) {
            throw new \RuntimeException('Invalid data returned from REST call to SuggestPageShortNames');
        }
        return $data->Names;
    }

    /**
     * FundraisingPageUrlCheck - check if a Url is free.
     *
     * @param  string $shortName A page short name that would become part of a justgiving Url.
     * @return boolean True if the Url is already in use. False if it is free.
     * @throws \InvalidArgumentException if shortName is invalid.
     */
    public function isUrlInUse($shortName)
    {
        $httpStatusCode = $this->transport->head('fundraising/pages/' . urlencode($shortName));

        switch ($httpStatusCode) {
            case 200:
                return true;
                break;
            case 400:
                throw new \InvalidArgumentException('URL contains invalid characters');
                break;
            case 404:
                return false;
                break;
        }
        throw new \RuntimeException('Unexpected return from FundraisingPageUrlCheck call');
    }

    /**
     * Get details of a fundraising page by its short url name.
     *
     * @param  string $pageShortName Would be replaced with the short page url.
     * @return FundraisingPage The page.
     */
    public function getPageDetails($pageShortName)
    {
        return new FundraisingPage($this->transport->get('fundraising/pages/' . $pageShortName, true));
    }

    /**
     * Get details of a fundraising page by its unique ID.
     *
     * @param  integer $pageId Would be replaced with the page's unique ID.
     * @return FundraisingPage The page.
     */
    public function getPageDetailsById($pageId)
    {
        return new FundraisingPage($this->transport->get('fundraising/pagebyid/' . $pageId, true));
    }

    /**
     *  - FundraisingPageUrlCheck
     *  - SuggestPageShortNames
     *  - RegisterFundraisingPage
     * @todo GetFundraisingPageDetails
     * @todo GetFundraisingPageDetailsById
     * @todo GetFundraisingPages
     * @todo GetFundraisingPageDonations
     * @todo GetFundraisingPageDonationsByReference
     * @todo UpdateFundraisingPage
     * - PageUpdates
     * - PageUpdateById
     * @todo PageUpdatesAddPost
     * @todo DeleteFundraisingPageUpdates
     * @todo DeleteFundraisingPageAttribution
     * @todo UpdateFundraisingPageAttribution
     * @todo AppendToFundraisingPageAttribution
     * @todo GetFundraisingPageAttribution
     * @todo UploadImage
     * @todo UploadDefaultImage
     * @todo AddImageToFundraisingPage
     * @todo DeleteFundraisingPageImage
     * @todo GetImagesForFundraisingPage
     * @todo AddVideoToFundraisingPage
     * @todo GetVideosForFundraisingPage
     * @todo CancelFundraisingPage
     * @todo UpdateNotificationsPreferences
     * @todo UpdateFundraisingPageSummary
     */
}

